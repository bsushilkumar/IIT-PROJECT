package comparator;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;

import static comparator.Comparator.*;

public class FileReading {

	private String csvSplitBy = "\\s+";
	private BufferedReader file1Buffer = null;
	private String lineFile1 = "";
	private String[] file1String, file2String;

	public void singleFileReading(File selectedFile) {
		try {
			single_ArrayListFile = new ArrayList<String[]>();

			System.out.println("single_ArrayListFile Creation" + single_ArrayListFile.size());
			file1Buffer = new BufferedReader(new FileReader(selectedFile.getAbsolutePath()));
			while ((lineFile1 = file1Buffer.readLine()) != null) {
				// use space as separator
				String[] lineRecord = lineFile1.split(csvSplitBy);
				single_ArrayListFile.add(lineRecord);

			}
			String name = selectedFile.getName();
			System.out.println(name.substring(name.lastIndexOf(".") + 1));
			if ((name.substring(name.lastIndexOf(".") + 1)).equals("txt")) {
				single_ArrayListFile.remove(0);
			}

		} catch (FileNotFoundException ex) {
			ex.printStackTrace();
		} catch (IOException ex) {
			ex.printStackTrace();
		} finally {
			if (file1Buffer != null) {
				try {
					file1Buffer.close();
				} catch (IOException ex) {
					ex.printStackTrace();
				}
			}
		}

		/*
		 * @ calling Train_And_Loop_Number_Sorting() method Present in
		 * TrainAndLoopNumberSorting class to find Train number and loop number from
		 * file and sorting them into ascending order.
		 */

		System.out.println("All data InArray");

		new TrainAndLoopNumberSorting().single_Train_And_Loop_Number_Sorting();

	}

	public void twoFileReading(File selectedFile, int number) {

		if (number == 1) {
			try {
				two_ArrayListFile1 = new ArrayList<String[]>();

				// System.out.println("single_ArrayListFile
				// Creation"+two_ArrayListFile1.size());
				file1Buffer = new BufferedReader(new FileReader(selectedFile.getAbsolutePath()));
				while ((lineFile1 = file1Buffer.readLine()) != null) {
					// use space as separator
					String[] lineRecord = lineFile1.split(csvSplitBy);
					two_ArrayListFile1.add(lineRecord);
				}

				String name = selectedFile.getName();
				// System.out.println(name.substring(name.lastIndexOf(".")+1));
				if ((name.substring(name.lastIndexOf(".") + 1)).equals("txt")) {
					two_ArrayListFile1.remove(0);
				}
				System.out.println(" file-1 ArrayFileSize in FileReading " + two_ArrayListFile1.size());

			} catch (FileNotFoundException ex) {
				ex.printStackTrace();
			} catch (IOException ex) {
				ex.printStackTrace();
			} finally {
				if (file1Buffer != null) {
					try {
						file1Buffer.close();
					} catch (IOException ex) {
						ex.printStackTrace();
					}
				}
			}

			/*
			 * @ calling Train_And_Loop_Number_Sorting() method Present in
			 * TrainAndLoopNumberSorting class to find Train number and loop number from
			 * file and sorting them into ascending order.
			 */

			new TrainAndLoopNumberSorting().two_Train_And_Loop_Number_Sorting(1);

		}
		if (number == 2) {
			try {
				two_ArrayListFile2 = new ArrayList<String[]>();

				// System.out.println("single_ArrayListFile
				// Creation"+two_ArrayListFile2.size());
				file1Buffer = new BufferedReader(new FileReader(selectedFile.getAbsolutePath()));
				while ((lineFile1 = file1Buffer.readLine()) != null) {
					// use space as separator
					String[] lineRecord = lineFile1.split(csvSplitBy);
					two_ArrayListFile2.add(lineRecord);
				}
				String name = selectedFile.getName();
				// System.out.println(name.substring(name.lastIndexOf(".")+1));
				if ((name.substring(name.lastIndexOf(".") + 1)).equals("txt")) {
					two_ArrayListFile2.remove(0);
				}

				System.out.println(" file-2 ArrayFileSize in FileReading " + two_ArrayListFile2.size());

			} catch (FileNotFoundException ex) {
				ex.printStackTrace();
			} catch (IOException ex) {
				ex.printStackTrace();
			} finally {
				if (file1Buffer != null) {
					try {
						file1Buffer.close();
					} catch (IOException ex) {
						ex.printStackTrace();
					}
				}
			}

			/*
			 * @ calling Train_And_Loop_Number_Sorting() method Present in
			 * TrainAndLoopNumberSorting class to find Train number and loop number from
			 * file and sorting them into ascending order.
			 */

			new TrainAndLoopNumberSorting().two_Train_And_Loop_Number_Sorting(2);

		}

	}

	public void single_Search_Button() {

		boolean flag = true;
		String resultString = null;
		single_TextArea.append("\t\t\t\t\t\tFile Comparison");
		single_TextArea.append("\n\n\nTrain Number  ");
		for (int i = 0; i < 2; i++) {
			single_TextArea
					.append("\t\t" + "Station Number  -->  " + " Arrival Time - " + "Departure Time   " + "[Halt Time]");
		}

		int timedifference = Integer.valueOf((String) single_TimeComboBox.getSelectedItem());

		Iterator<String[]> it = single_ArrayListFile.iterator();
		while (it.hasNext()) {

			String[] strings = (String[]) it.next();

			if (!(strings[0].equals(""))) {

				for (int j = 9; j < strings.length; j += 3) {
					System.out.println("Arrval and Dept time passing to Method    Loop" + strings[j] + "  Arrival-"
							+ strings[j + 1] + "  Dept-" + strings[j + 2]);
					resultString = TimeDifferenceCalculation.getTD().time_Difference_Calculation(strings[j + 1],
							strings[j + 2]);
					// resultString = new CompareAction().calculateTimeDifference(strings[j + 1],
					// strings[j + 2]);
					String[] timeResult = resultString.split(":");
					int hour = 0, minute = 0, second = 0;

					// Checking String is null or not
					if (timeResult[0].equals("0")) {
						if (timeResult[0].equals("0")) {

							hour = 0;
							if (timeResult[1].equals("0")) {
								minute = 0;
								if (timeResult[2].equals("0")) {
									second = 0;
								} else {
									second = Integer.parseInt(timeResult[2]);
								}
							} else {
								minute = Integer.parseInt(timeResult[1]);
								if (timeResult[2].equals("0")) {
									second = 0;
								} else {
									second = Integer.parseInt(timeResult[2]);
								}

							}

						}

						else {
							hour = Integer.parseInt(timeResult[0]);

							if (timeResult[1].equals("0")) {
								minute = 0;
								if (timeResult[2].equals("0")) {
									second = 0;
								}
							} else {
								minute = Integer.parseInt(timeResult[1]);

								if (timeResult[2].equals("0")) {
									second = 0;
								} else {
									second = Integer.parseInt(timeResult[2]);
								}
							}

						}

					} else {

						hour = Integer.parseInt(timeResult[0]);
						if (timeResult[1].equals("0")) {
							minute = 0;
							if (timeResult[2].equals("0")) {
								second = 0;
							}
						} else {
							minute = Integer.parseInt(timeResult[1]);

							if (timeResult[2].equals("0")) {
								second = 0;
							} else {
								second = Integer.parseInt(timeResult[2]);
							}
						}

					}

					if (hour >= 0 || minute >= 0) {

						if (hour > 0) {
							if (flag) {
								single_TextArea.append("\n\n" + strings[0]);
								flag = false;
							}
							single_TextArea.append("\t\t" + strings[j] + "      --->    " + strings[j + 1] + "  -  "
									+ strings[j + 2] + "    [" + hour + ":" + minute + ":" + second + "]" + "\t");

							// displayResultF2.append(strings[j] + "\t\t" + strings[j + 1] + "\t\t" +
							// strings[j + 2]
							// + "\t\t" + hour + ":" + minute + ":" + second + "\n");

						}
						if (minute >= timedifference && hour == 0) {
							//
							if (flag) {
								single_TextArea.append("\n\n" + strings[0]);
								flag = false;
							}
							single_TextArea.append("\t\t" + strings[j] + "      --->    " + strings[j + 1] + "  -  "
									+ strings[j + 2] + "    [" + hour + ":" + minute + ":" + second + "]" + "\t");

							// displayResultF2.append(strings[j] + "\t\t" + strings[j + 1] + "\t\t" +
							// strings[j + 2]
							// + "\t\t" + hour + ":" + minute + ":" + second + "\n");
						}

					}

				}
				flag = true;
			}

		}

	}

	public void two_Compare_ByDeparture() {

		// System.out.println("##### inside two_search_button");
		boolean flag = true;
		int spaceCount=0;
		int timedifference = Integer.valueOf((String) two_TimeComboBox.getSelectedItem());
		char sign=' ';
		// System.out.println("printing TimeComboBox value---"+timedifference);
		Iterator itF1 = two_ArrayListFile1.iterator();
		Iterator itF2 = two_ArrayListFile2.iterator();
		System.out
				.println("$$$$$$$$$$$$$$$$$$$$$$$$$$" + two_ArrayListFile1.size() + "---" + two_ArrayListFile2.size());
		// System.out.println("ArrayList f1"+two_ArrayListFile1);
		// System.out.println("ArrayList f2"+two_ArrayListFile2);
		while (itF1.hasNext()) {
			String[] strings = (String[]) itF1.next();
			// System.out.println("Inside while loop of two search button-1");
			// System.out.println(strings[0].equals(two_TrainList.getSelectedItem()));
			if (strings[0].equals(two_TrainList.getSelectedItem())) {

				file1String = strings;
				// System.out.println(strings[0]);
				System.out.println("file1String length=" + file1String.length);
				for(int i=0;i<file1String.length;i++)
				{
					System.out.println("File1String *******######"+file1String[i]);
				}
				break;
			}

		}

		while (itF2.hasNext()) {
			// System.out.println("Inside while loop of two search button-2");
			String[] strings = (String[]) itF2.next();
			// System.out.println(strings[0].equals(two_TrainList.getSelectedItem()));
			if (strings[0].equals(two_TrainList.getSelectedItem())) {
				file2String = strings;
				// System.out.println(strings[0]);
				System.out.println("file2String length=" + file2String.length);
				for(int i=0;i<file2String.length;i++)
				{
					System.out.println("File2String *******######"+file2String[i]);
				}
				break;
			}

		}
		String stationFile1 = null, stationFile2 = null, resultString = null;

		for (int i = 9; i < file1String.length; i += 3) {
			System.out.println(
					"Inside first for Loop i value + length------>" + file1String[i] + "-" + file1String[i].length());
			if (file1String[i].length() == 7) {
				stationFile1 = file1String[i].substring(0, file1String[i].length() - 4);
				System.out.println("After substring " + stationFile1);
			}
			if (file1String[i].length() == 6) {
				stationFile1 = "0"+file1String[i].substring(0, file1String[i].length() - 4);
				System.out.println("After substring " + stationFile1);
			}
			if (file1String[i].length() == 5) {
				stationFile1 = "00"+file1String[i].substring(0, file1String[i].length() - 4);
				System.out.println("After substring " + stationFile1);
			}
			for (int j = 9; j < file2String.length; j += 3) {
				System.out.println("Inside second for Loop j value + length------>" + file2String[j] + "-"
						+ file2String[j].length());

				if (file2String[j].length() == 7) {
					stationFile2 = file2String[j].substring(0, file2String[j].length() - 4);
					System.out.println("After substring " + stationFile2);
				}
				if (file2String[j].length() == 6) {
					stationFile2 = "0"+file2String[j].substring(0, file2String[j].length() - 4);
					System.out.println("After substring " + stationFile2);
				}
				if (file2String[j].length() == 5) {
					stationFile2 = "00"+file2String[j].substring(0, file2String[j].length() - 4);
					System.out.println("After substring " + stationFile2);
				}

				if (stationFile1.equals(stationFile2)) {
					System.out.println("Comparision of two station (Equale or not)" + stationFile1.equals(stationFile2)
							+ "/StaionF1-=" + stationFile1 + "StationF2-" + stationFile2);
					System.out.println("Calling method to calculate time");
					System.out.print(
							"\t passing arrgument to time" + file1String[i + 2] + "---------" + file2String[j + 2]);
				//checking which is greater number.........
					
					if(Integer.valueOf(file1String[i+2])<Integer.valueOf(file2String[j+2]))
					{
						resultString = TimeDifferenceCalculation.getTD().time_Difference_Calculation(file1String[i + 2],
							file2String[j + 2]);
						
						String[] timeResult = resultString.split(":");
						int hour = 0, minute = 0, second = 0;

						// Checking String is null or not
						if (timeResult[0].equals("0")) {
							if (timeResult[0].equals("0")) {

								hour = 0;
								if (timeResult[1].equals("0")) {
									minute = 0;
									if (timeResult[2].equals("0")) {
										second = 0;
									} else {
										second = Integer.parseInt(timeResult[2]);
									}
								} else {
									minute = Integer.parseInt(timeResult[1]);
									if (timeResult[2].equals("0")) {
										second = 0;
									} else {
										second = Integer.parseInt(timeResult[2]);
									}

								}

							}

							else {
								hour = Integer.parseInt(timeResult[0]);

								if (timeResult[1].equals("0")) {
									minute = 0;
									if (timeResult[2].equals("0")) {
										second = 0;
									}
								} else {
									minute = Integer.parseInt(timeResult[1]);

									if (timeResult[2].equals("0")) {
										second = 0;
									} else {
										second = Integer.parseInt(timeResult[2]);
									}
								}

							}

						} else {

							hour = Integer.parseInt(timeResult[0]);
							if (timeResult[1].equals("0")) {
								minute = 0;
								if (timeResult[2].equals("0")) {
									second = 0;
								}
							} else {
								minute = Integer.parseInt(timeResult[1]);

								if (timeResult[2].equals("0")) {
									second = 0;
								} else {
									second = Integer.parseInt(timeResult[2]);
								}
							}

						}

						if (hour >= 0 || minute >= 0) {
							if (flag) {
								two_TextArea.append("\t\t\t\t\t\tTrain Time Comarison");
								two_TextArea.append("\n\nTrain Number" + "\t\tStaion Number --->    (Departure Time from File-1)    -    (Departure Time from File-2)        Time Difference[HH:MM:SS]"
									/*	+ "\t\tStaion Number --->Departure Time from File-1 - Departure Time from File-2   Time Difference[HH:MM:SS]"
										+ "\t\tStaion Number --->Departure Time from File-1 - Departure Time from File-2   Time Difference[HH:MM:SS]\n"*/);
								two_TextArea.append("\n\n\n\n\n\n" + file1String[0]);
								flag = false;
							}
							
							 if(spaceCount==3)
	                         {
	                         	two_TextArea.append("\n\n");
	                         	spaceCount=0;
	                         }
							if (hour > 0) {
	                           
								spaceCount++;
								two_TextArea.append("\t\t" +"                "+/* file1String[j] */stationFile1+ "      --->    "+file1String[i+2] +" - "+file2String[j+2]+"    " +sign+ "    [" + hour + ":"
										+ minute + ":" + second + "]" );
								sign=' ';
								

							}
							if (minute >= timedifference && hour == 0) {
								
								spaceCount++;
								two_TextArea.append("\t\t" + "               "+/*file1String[j] */stationFile1+ "      --->    "+file1String[i+2] +" - "+file2String[j+2]+"    " +sign+ "    [" + hour + ":"
										+ minute + ":" + second + "]" );
	                                 sign=' ';
							}

						}
						
						
					}
					if(Integer.valueOf(file1String[i+2])>Integer.valueOf(file2String[j+2])) {
						resultString = TimeDifferenceCalculation.getTD().time_Difference_Calculation(file2String[j + 2],file1String[i + 2]);
						sign='-';
						String[] timeResult = resultString.split(":");
						int hour = 0, minute = 0, second = 0;

						// Checking String is null or not
						if (timeResult[0].equals("0")) {
							if (timeResult[0].equals("0")) {

								hour = 0;
								if (timeResult[1].equals("0")) {
									minute = 0;
									if (timeResult[2].equals("0")) {
										second = 0;
									} else {
										second = Integer.parseInt(timeResult[2]);
									}
								} else {
									minute = Integer.parseInt(timeResult[1]);
									if (timeResult[2].equals("0")) {
										second = 0;
									} else {
										second = Integer.parseInt(timeResult[2]);
									}

								}

							}

							else {
								hour = Integer.parseInt(timeResult[0]);

								if (timeResult[1].equals("0")) {
									minute = 0;
									if (timeResult[2].equals("0")) {
										second = 0;
									}
								} else {
									minute = Integer.parseInt(timeResult[1]);

									if (timeResult[2].equals("0")) {
										second = 0;
									} else {
										second = Integer.parseInt(timeResult[2]);
									}
								}

							}

						} else {

							hour = Integer.parseInt(timeResult[0]);
							if (timeResult[1].equals("0")) {
								minute = 0;
								if (timeResult[2].equals("0")) {
									second = 0;
								}
							} else {
								minute = Integer.parseInt(timeResult[1]);

								if (timeResult[2].equals("0")) {
									second = 0;
								} else {
									second = Integer.parseInt(timeResult[2]);
								}
							}

						}

						if (hour >= 0 || minute >= 0) {
							if (flag) {
								two_TextArea.append("\t\t\t\t\t\tTrain Time Comarison");
								two_TextArea.append("\n\nTrain Number" + "\t\tStaion Number --->    (Departure Time from File-1)    -    (Departure Time from File-2)        Time Difference[HH:MM:SS]"
									/*	+ "\t\tStaion Number --->Departure Time from File-1 - Departure Time from File-2  Time Difference[HH:MM:SS]"
										+ "\t\tStaion Number --->Departure Time from File-1 - Departure Time from File-2  Time Difference[HH:MM:SS]\n"*/);
								two_TextArea.append("\n\n\n\n\n\n" + file1String[0]);
								flag = false;
							}
							
							 if(spaceCount==3)
	                         {
	                         	two_TextArea.append("\n\n");
	                         	spaceCount=0;
	                         }
							if (hour > 0) {
	                           
								spaceCount++;
								two_TextArea.append("\t\t" +"                "+/* file1String[j] */stationFile1+ "      --->    "+file1String[i+2] +" - "+file2String[j+2]+"    " +sign+ "    [" + hour + ":"
										+ minute + ":" + second + "]");
								sign=' ';
								

							}
							if (minute >= timedifference && hour == 0) {
								
								spaceCount++;
								two_TextArea.append("\t\t" + "               "+/*file1String[j] */stationFile1+ "      --->    "+file1String[i+2] +" - "+file2String[j+2]+"    " +sign+ "    [" + hour + ":"
										+ minute + ":" + second + "]" );
	                                 sign=' ';
							}

						}
					}
					
					
					
					
					
					//resultString = TimeDifferenceCalculation.getTD().time_Difference_Calculation(file1String[i + 2],
					//		file2String[j + 2]);
					// --------------------------------------------------->
					System.out.println("Resulst after time calculation =================>>>" + resultString);
					
					// --------------------------------------------------->
					break;
				}

			}
		}

	}
	
	public void two_Compare_ByArrival() {
		
		
	}
	
	
	

}
